entry
  下面
  app: path.resolve(__dirname,'./src/index.js')
     1.指定打包文件入口，然后根据app里面的依赖关系，一层层迭代下去之后，把整个js的依赖树整体打包成一个js文件
     2.注意用绝对路径，防止不同的操作系统有差异


output
  下面
  filename:'[name].[hash].js'  //[name] 指向前面的entry的key值app ,如果app改为bundle，那么打包出来的就是bundle.adsada.js这种，  打包完成之后根据内容加一个hash值
  path:path.resolve(__dirname,'build')
  publicPath:'/public'
  很重要，是在[name].[hash].js前面加这个路径，/public/app.hash.js,你会看到在index.html中生成，有public标签的
  <script type="text/javascript" src="/public/client.6dd9fd60061de28dbe69.js"></script></body>
  node端用express.use来区分，如果是public目录下的文件来访问，直接返回build路径下的同名文件就行

服务端
  output下
  filename:'server.js', 因为服务端不存在浏览器缓存，所以不需要用什么hash值之类的
  libraryTarget:'commonjs2'  规定了打包出来后的js使用的模块化的方案，这里有 amd umd cmd 等



